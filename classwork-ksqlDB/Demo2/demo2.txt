1) Запускаем сервисы
docker compose up -d

2) Проверяем контейнеры
docker compose ps -a

3) Проверям логи Kafka Connect
docker logs -f connect
^C

4) Проверяем статус и плагины коннекторов
curl http://192.168.56.200:29097 | jq
curl http://192.168.56.200:29097/connector-plugins | jq

5) Проверяем список топиков
docker exec kafka0 kafka-topics --list --bootstrap-server kafka0:29098

6) Создадим таблицу в PostgreSQL и запишем в неё данные
docker exec -ti postgres psql -U postgres
CREATE TABLE titles (id SERIAL PRIMARY KEY, title VARCHAR(120));
INSERT INTO titles (title) values ('Stranger Things');
INSERT INTO titles (title) values ('Black Mirror');
INSERT INTO titles (title) values ('The Office');
SELECT * FROM titles;
\q

7) Запускаем ksqlDB CLI
docker exec -ti ksqldb-cli ksql http://ksqldb-server:8088

8) Устанавливаем чтение с начала темы
SET 'auto.offset.reset' = 'earliest';

9) Создаём коннектор postgres-source
CREATE SOURCE CONNECTOR `postgres-source-10001` WITH (
    "connector.class"='io.confluent.connect.jdbc.JdbcSourceConnector',
    "connection.url"='jdbc:postgresql://postgres:5432/postgres?user=postgres&password=postgres',
    "mode"='incrementing',
    "incrementing.column.name"='id',
    "table.whitelist"='titles',
    "topic.prefix"='postgres.',
    "key"='id');

10) Выводим список коннекторов
SHOW CONNECTORS;

11) Получаем описание коннектора inventory-connector
DESCRIBE CONNECTOR `postgres-source`;

12) Проверяем топики
SHOW TOPICS;

13) Выведем содержимое топика
PRINT `postgres.titles` FROM BEGINNING;

14) Удаляем коннектор
DROP CONNECTOR `postgres-source`;
^D

15) Завершаем работу
docker compose stop
docker container prune -f
docker volume prune -f
